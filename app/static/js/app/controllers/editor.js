// Generated by CoffeeScript 1.3.3
(function() {
  var WorkGroup, WorkPermission, WorkPermissionModal, WorkRequirement,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Projectionable.Editor = (function(_super) {

    __extends(Editor, _super);

    function Editor() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.initSortable = __bind(this.initSortable, this);

      this.unlockProject = __bind(this.unlockProject, this);

      this.lockProject = __bind(this.lockProject, this);

      this.startProject = __bind(this.startProject, this);

      this.assessStartable = __bind(this.assessStartable, this);

      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);

      this.saveRate = __bind(this.saveRate, this);

      this.saveTitle = __bind(this.saveTitle, this);

      var _this = this;
      Editor.__super__.constructor.apply(this, arguments);
      App.Editor = this;
      this.routes({
        '/editor': function(params) {
          if (App.project === null || !App.project.__proto__.hasOwnProperty('id')) {
            return _this.navigate('/manager');
          } else {
            _this.project = App.project;
            _this.render().active();
            return App.trigger('renderNavigation', 'editor');
          }
        }
      });
      this.bind('calculateHours', function() {
        var dollarText, dollars, hours;
        hours = 0;
        _.each(_this.children, function(child) {
          if (!isNaN(parseFloat(child.group.hours)) && !child.$el.find('.edit-group-form').hasClass('rejected')) {
            return hours += parseFloat(child.group.hours);
          }
        });
        _this.project.hours = hours;
        _this.$hoursDisplay.text("" + (App.formatNumber(hours)));
        dollars = parseFloat(_this.project.rate) * parseFloat(hours);
        dollarText = isNaN(dollars) ? ' --' : App.formatNumber(dollars);
        return _this.$dollarsDisplay.text("$" + dollarText);
      });
    }

    Editor.prototype.className = 'work-editor';

    Editor.prototype.elements = {
      '.project-title-input': '$titleInput',
      '.project-rate-input': '$rateInput',
      '.project-groups': '$groupList',
      '.project-hours': '$hoursDisplay',
      '.project-dollars': '$dollarsDisplay',
      '.start-button': '$startButton',
      '.lock-button': '$lockButton',
      '.unlock-button': '$unlockButton',
      '.sharing-button': '$sharingButton',
      '.permissions-modal-container': '$permissionModalContainer'
    };

    Editor.prototype.events = {
      'blur .project-title-input': 'saveTitle',
      'blur .project-rate-input': 'saveRate'
    };

    Editor.prototype.saveTitle = function(event) {
      var title;
      title = this.$titleInput.val();
      if (title !== this.project.title) {
        return this.project.updateAttribute('title', title);
      }
    };

    Editor.prototype.saveRate = function(event) {
      var rate;
      rate = parseFloat(this.$rateInput.val());
      if (!isNaN(rate) && rate !== this.project.rate) {
        this.trigger('calculateHours');
        return this.project.updateAttribute('rate', rate);
      }
    };

    Editor.prototype["new"] = function(event) {
      var group;
      if (event == null) {
        event = null;
      }
      if (event !== null) {
        event.preventDefault();
      }
      group = Projectionable.RequirementGroup.create(App.makeGroupTemplate(this.project.id, Projectionable.RequirementGroup.findAllByAttribute('project_id', this.project.id).length));
      return this.addOne(group);
    };

    Editor.prototype.addOne = function(group) {
      var controller;
      controller = new WorkGroup({
        parent: this,
        group: group
      });
      this.children.push(controller);
      return this.$groupList.append(controller.render().el);
    };

    Editor.prototype.addAll = function() {
      var group, groups, _i, _len;
      groups = _.sortBy(Projectionable.RequirementGroup.findAllByAttribute('project_id', this.project.id), 'index');
      this.$groupList.empty();
      this.children = [];
      if (groups.length > 0) {
        for (_i = 0, _len = groups.length; _i < _len; _i++) {
          group = groups[_i];
          this.addOne(group);
        }
      }
      if (this.project.status === 'pending') {
        group = App.makeGroupTemplate(this.project.id, groups.length);
        this.addOne(group);
      }
      return this;
    };

    Editor.prototype.assessStartable = function() {
      var enable;
      if (this.project.permission === 'client') {
        enable = true;
        _.each(Projectionable.RequirementGroup.findAllByAttribute('project_id', this.project.id), function(group) {
          var _ref;
          if ((_ref = group.status) === 'pending' || _ref === 'requested') {
            return enable = false;
          }
        });
        _.each(Projectionable.Requirement.findAllByAttribute('project_id', this.project.id), function(req) {
          var _ref;
          if ((_ref = req.status) === 'pending' || _ref === 'requested') {
            return enable = false;
          }
        });
        if (enable === true) {
          this.$startButton.removeClass('disabled').off('click').on('click', this.startProject);
        }
      }
      return this;
    };

    Editor.prototype.startProject = function(event) {
      event.preventDefault();
      if (this.$startButton.hasClass('disabled')) {
        return;
      }
      this.project.status = 'started';
      this.project.updateAttribute('status', 'started');
      return this.render();
    };

    Editor.prototype.lockProject = function(event) {
      event.preventDefault();
      this.project.status = 'locked';
      this.project.updateAttribute('status', 'locked');
      return this.render();
    };

    Editor.prototype.unlockProject = function(event) {
      event.preventDefault();
      this.project.status = 'started';
      this.project.updateAttribute('status', 'started');
      return this.render();
    };

    Editor.prototype.initSortable = function() {
      var sortableOptions,
        _this = this;
      sortableOptions = {
        axis: 'y',
        containment: 'parent',
        scrollSensitivity: 100,
        stop: function() {
          var groups;
          groups = [];
          _this.$groupList.children('li').each(function(index, el) {
            var groupID;
            groupID = parseInt($(el).data('group-id'));
            if (!isNaN(groupID)) {
              return groups.push(Projectionable.RequirementGroup.findByAttribute('id', groupID));
            }
          });
          return _.each(groups, function(group, index) {
            return group.updateAttribute('index', index);
          });
        }
      };
      this.$groupList.sortable(sortableOptions);
      return this;
    };

    Editor.prototype.getContext = function() {
      return {
        project: this.project,
        permissions: Projectionable.Permission.findAllByAttribute('project_id', this.project.id),
        groups: Projectionable.RequirementGroup.findAllByAttribute('project_id', this.project.id)
      };
    };

    Editor.prototype.render = function() {
      var _this = this;
      this.html(this.view('work_editor_editor')(this.getContext()));
      $('#work-editor').html(this.$el);
      this.addAll().assessStartable().initSortable();
      if (this.project.permission === 'owner') {
        if (this.project.status === 'started') {
          this.$lockButton.on('click', this.lockProject);
        } else if (this.project.status === 'locked') {
          this.$unlockButton.on('click', this.unlockProject);
        }
        this.permissionModal = new WorkPermissionModal({
          parent: this
        });
        this.$permissionModalContainer.html(this.permissionModal.render().el);
        this.$sharingButton.off('click').on('click', function(event) {
          event.preventDefault();
          return _this.permissionModal.trigger('showSharingModal');
        });
      }
      setTimeout((function() {
        var focused;
        if (_this.$titleInput.val() === '') {
          return _this.$titleInput.get(0).focus();
        } else {
          focused = false;
          return $('.project-groups input').each(function() {
            if (!focused && this.value === '') {
              this.focus();
              return focused = true;
            }
          });
        }
      }), 1);
      return this;
    };

    return Editor;

  })(Spine.Controller);

  WorkPermissionModal = (function(_super) {

    __extends(WorkPermissionModal, _super);

    function WorkPermissionModal() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.enableClient = __bind(this.enableClient, this);

      this.hideStripeButton = __bind(this.hideStripeButton, this);

      this.showStripeButton = __bind(this.showStripeButton, this);

      this.hideSharingModal = __bind(this.hideSharingModal, this);

      this.showSharingModal = __bind(this.showSharingModal, this);

      this.addAllPermissions = __bind(this.addAllPermissions, this);

      this.addOneCoworker = __bind(this.addOneCoworker, this);

      this.addOneClient = __bind(this.addOneClient, this);

      this.validateEmail = __bind(this.validateEmail, this);

      this.validateNewClient = __bind(this.validateNewClient, this);

      this.validateNewCoworker = __bind(this.validateNewCoworker, this);

      this.clientInputEnter = __bind(this.clientInputEnter, this);

      this.coworkerInputEnter = __bind(this.coworkerInputEnter, this);

      this.inviteClient = __bind(this.inviteClient, this);

      this.inviteCoworker = __bind(this.inviteCoworker, this);
      WorkPermissionModal.__super__.constructor.apply(this, arguments);
      this.bind('showSharingModal', this.showSharingModal);
    }

    WorkPermissionModal.prototype.elements = {
      '.sharing-modal-close-button': '$sharingModalCloseButton',
      '.sharing-modal': '$sharingModal',
      '.sharing-modal-shadow': '$sharingModalShadow',
      '.coworker-input': '$coworkerInput',
      '.client-input': '$clientInput',
      '.invite-coworker-button': '$coworkerButton',
      '.invite-client-button': '$clientButton',
      '.coworker-list': '$coworkerList',
      '.client-list': '$clientList'
    };

    WorkPermissionModal.prototype.events = {
      'keyup .coworker-input': 'validateNewCoworker',
      'keyup .client-input': 'validateNewClient',
      'keypress .coworker-input': 'coworkerInputEnter',
      'keypress .client-input': 'clientInputEnter',
      'click .invite-coworker-button': 'inviteCoworker',
      'click .invite-client-button': 'inviteClient'
    };

    WorkPermissionModal.prototype.inviteCoworker = function(event) {
      var perm;
      event.preventDefault();
      if (this.$coworkerButton.hasClass('disabled')) {
        return;
      }
      perm = Projectionable.Permission.create({
        email: $.trim(this.$coworkerInput.val()),
        project_id: this.parent.project.id,
        permission: 'coworker'
      });
      this.addAllPermissions();
      return this.$coworkerInput.val('');
    };

    WorkPermissionModal.prototype.inviteClient = function(event) {
      var perm;
      event.preventDefault();
      if (this.$clientButton.hasClass('disabled')) {
        return;
      }
      perm = Projectionable.Permission.create({
        email: $.trim(this.$clientInput.val()),
        project_id: this.parent.project.id,
        permission: 'client'
      });
      this.addAllPermissions();
      return this.$clientInput.val('');
    };

    WorkPermissionModal.prototype.coworkerInputEnter = function(event) {
      var code;
      code = event.charCode ? event.charCode : event.keyCode;
      if (code === 13) {
        return this.$coworkerButton.trigger('click');
      }
    };

    WorkPermissionModal.prototype.clientInputEnter = function(event) {
      var code;
      code = event.charCode ? event.charCode : event.keyCode;
      if (code === 13) {
        return this.$clientButton.trigger('click');
      }
    };

    WorkPermissionModal.prototype.validateNewCoworker = function() {
      if (this.validateEmail(this.$coworkerInput.val())) {
        return this.$coworkerButton.removeClass('disabled');
      } else {
        return this.$coworkerButton.addClass('disabled');
      }
    };

    WorkPermissionModal.prototype.validateNewClient = function() {
      if (this.validateEmail(this.$clientInput.val())) {
        return this.$clientButton.removeClass('disabled');
      } else {
        return this.$clientButton.addClass('disabled');
      }
    };

    WorkPermissionModal.prototype.validateEmail = function(email) {
      return email.toString().search(/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/) > -1;
    };

    WorkPermissionModal.prototype.addOneClient = function(client) {
      var controller;
      controller = new WorkPermission({
        parent: this,
        permission: client,
        type: 'client'
      });
      return this.$clientList.append(controller.render().el);
    };

    WorkPermissionModal.prototype.addOneCoworker = function(coworker) {
      var controller;
      controller = new WorkPermission({
        parent: this,
        permission: coworker,
        type: 'coworker'
      });
      return this.$coworkerList.append(controller.render().el);
    };

    WorkPermissionModal.prototype.addAllPermissions = function() {
      var client, clients, coworker, coworkers, permissions, _i, _j, _len, _len1;
      this.$coworkerList.empty();
      permissions = Projectionable.Permission.findAllByAttribute('project_id', this.parent.project.id);
      coworkers = _.where(permissions, {
        permission: 'coworker'
      });
      if (coworkers.length > 0) {
        for (_i = 0, _len = coworkers.length; _i < _len; _i++) {
          coworker = coworkers[_i];
          this.addOneCoworker(coworker);
        }
      } else {
        this.$coworkerList.html("<div class='permission empty'><span>No coworkers.</span></div>");
      }
      if (this.parent.project.client_enabled === true) {
        this.$clientList.empty();
        clients = _.where(permissions, {
          permission: 'client'
        });
        if (clients.length > 0) {
          for (_j = 0, _len1 = clients.length; _j < _len1; _j++) {
            client = clients[_j];
            this.addOneClient(client);
          }
        } else {
          this.$clientList.html("<div class='permission empty'><span>No clients.</span></div>");
        }
      }
      return this;
    };

    WorkPermissionModal.prototype.showSharingModal = function() {
      var _this = this;
      this.$sharingModal.fadeIn(500, function() {
        return _this.$sharingModal.find('input').first().get(0).focus();
      });
      if (this.parent.project.client_enabled === false) {
        return setTimeout(this.showStripeButton, 10);
      }
    };

    WorkPermissionModal.prototype.hideSharingModal = function(event) {
      var _this = this;
      if (event == null) {
        event = null;
      }
      if (event !== null) {
        event.preventDefault();
      }
      $('#stripe-button-container').fadeOut(500);
      return this.$sharingModal.fadeOut(500, function() {
        return _this.hideStripeButton();
      });
    };

    WorkPermissionModal.prototype.showStripeButton = function() {
      var offset;
      offset = this.$sharingModal.find('.right-half').offset();
      $('#stripe-button-container').css({
        display: 'none',
        top: offset.top + 100,
        left: offset.left
      }).fadeIn(490);
      return this;
    };

    WorkPermissionModal.prototype.hideStripeButton = function() {
      $('#stripe-button-container').css({
        top: -100,
        left: -200
      });
      return this;
    };

    WorkPermissionModal.prototype.enableClient = function(event) {
      event.preventDefault();
      this.parent.project.updateAttribute('client_enabled', true);
      return this.hideStripeButton().render().showSharingModal();
    };

    WorkPermissionModal.prototype.getContext = function() {
      return {
        project: this.parent.project
      };
    };

    WorkPermissionModal.prototype.render = function() {
      this.html(this.view('work_editor_editor-permission-modal')(this.getContext()));
      this.addAllPermissions();
      this.$sharingModalCloseButton.off('click').on('click', this.hideSharingModal);
      this.$sharingModalShadow.off('click').on('click', this.hideSharingModal);
      $('#stripe-button-container .enable-client-button').off('click').on('click', this.enableClient);
      return this;
    };

    return WorkPermissionModal;

  })(Spine.Controller);

  WorkPermission = (function(_super) {

    __extends(WorkPermission, _super);

    function WorkPermission() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.deletePermission = __bind(this.deletePermission, this);
      WorkPermission.__super__.constructor.apply(this, arguments);
    }

    WorkPermission.prototype.tag = 'li';

    WorkPermission.prototype.className = 'permission clearfix';

    WorkPermission.prototype.events = {
      'click .remove-link': 'deletePermission'
    };

    WorkPermission.prototype.deletePermission = function(event) {
      event.preventDefault();
      this.permission.destroy();
      this.release();
      this.parent.addAllPermissions();
      return this;
    };

    WorkPermission.prototype.getContext = function() {
      return {
        project: this.parent.parent.project,
        permission: this.permission,
        type: this.type
      };
    };

    WorkPermission.prototype.render = function() {
      if (this.parent.parent.project.permission === 'owner') {
        this.html(this.view('work_editor_editor-permission')(this.getContext()));
      }
      return this;
    };

    return WorkPermission;

  })(Spine.Controller);

  WorkGroup = (function(_super) {

    __extends(WorkGroup, _super);

    function WorkGroup() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.clientRejectGroup = __bind(this.clientRejectGroup, this);

      this.clientApproveGroup = __bind(this.clientApproveGroup, this);

      this.clientRevertGroup = __bind(this.clientRevertGroup, this);

      this.revertGroup = __bind(this.revertGroup, this);

      this.deleteGroup = __bind(this.deleteGroup, this);

      this.rejectGroup = __bind(this.rejectGroup, this);

      this.approveGroup = __bind(this.approveGroup, this);

      this.saveTitle = __bind(this.saveTitle, this);

      this.createNewGroup = __bind(this.createNewGroup, this);

      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);

      var _this = this;
      WorkGroup.__super__.constructor.apply(this, arguments);
      this.bind('calculateHours', function() {
        var dollarText, dollars, hours;
        hours = 0;
        _.each(_this.children, function(child) {
          if (!isNaN(parseFloat(child.requirement.hours)) && !child.$el.find('.edit-requirement-form').hasClass('rejected')) {
            return hours += parseFloat(child.requirement.hours);
          }
        });
        _this.group.hours = hours;
        _this.$hoursDisplay.text("" + (App.formatNumber(hours)));
        dollars = parseFloat(_this.parent.project.rate) * parseFloat(hours);
        dollarText = isNaN(dollars) ? ' --' : App.formatNumber(dollars);
        _this.$dollarsDisplay.text("$" + dollarText);
        return _this.parent.trigger('calculateHours');
      });
    }

    WorkGroup.prototype.tag = 'li';

    WorkGroup.prototype.className = 'edit-group-wrapper clearfix';

    WorkGroup.prototype.elements = {
      '.group-title-input': '$titleInput',
      '.group-hours': '$hoursDisplay',
      '.group-dollars': '$dollarsDisplay',
      '.edit-group-form-body': '$groupBody',
      '.group-requirements': '$reqList',
      '.group-delete-wrapper': '$deleteWrapper',
      '.group-delete-link': '$deleteLink',
      '.group-status-wrapper': '$statusWrapper',
      '.group-approve-button': '$approveButton',
      '.group-reject-button': '$rejectButton',
      '.owner-delete-group': '$ownerDeleteLink',
      '.owner-revert-group': '$ownerRevertLink',
      '.client-revert-group': '$clientRevertLink',
      '.client-approve-group': '$clientApproveLink',
      '.client-reject-group': '$clientRejectLink'
    };

    WorkGroup.prototype.addOne = function(req) {
      var controller;
      controller = new WorkRequirement({
        parent: this,
        requirement: req
      });
      this.children.push(controller);
      return this.$reqList.append(controller.render().el);
    };

    WorkGroup.prototype.addAll = function() {
      var req, requirements, _i, _len;
      requirements = _.sortBy(Projectionable.Requirement.findAllByAttribute('group_id', this.group.id), 'index');
      this.$reqList.empty();
      this.children = [];
      if (requirements.length > 0) {
        this.$groupBody.addClass('active');
        for (_i = 0, _len = requirements.length; _i < _len; _i++) {
          req = requirements[_i];
          this.addOne(req);
        }
      }
      if (this.group.__proto__.hasOwnProperty('id') && this.parent.project.status === 'pending' && this.group.status !== 'rejected') {
        this.$groupBody.addClass('active');
        req = App.makeRequirementTemplate(this.group.id, requirements.length);
        this.addOne(req);
      }
      this.trigger('calculateHours');
      return this;
    };

    WorkGroup.prototype.createNewGroup = function() {
      var group, title,
        _this = this;
      title = $.trim(this.$titleInput.val());
      if (title === '') {
        return;
      }
      this.$titleInput.off('keyup');
      $.extend(this.group, {
        title: title
      });
      this.group = Projectionable.RequirementGroup.create(this.group);
      group = App.makeGroupTemplate(this.parent.project.id, Projectionable.RequirementGroup.findAllByAttribute('project_id', this.parent.project.id).length);
      this.parent.addOne(group);
      this.$groupBody.add(this.$deleteWrapper).add(this.$statusWrapper).addClass('active');
      this.$titleInput.on('blur', this.saveTitle);
      this.$deleteLink.on('click', this.deleteRequirement);
      this.group.one('ajaxSuccess', function() {
        var req;
        req = App.makeRequirementTemplate(_this.group.id, 0);
        return _this.addOne(req);
      });
      return this.group.trigger('update');
    };

    WorkGroup.prototype.saveTitle = function() {
      var title;
      title = this.$titleInput.val();
      if (title === this.group.title) {
        return;
      }
      return this.group.updateAttribute('title', title);
    };

    WorkGroup.prototype.approveGroup = function(event) {
      event.preventDefault();
      if (this.$approveButton.hasClass('disabled')) {
        return;
      }
      this.group.status = 'approved';
      this.$titleInput.attr('readonly', 'readonly').off('keyup');
      this.$approveButton.add(this.$rejectButton).addClass('disabled');
      this.group.updateAttribute('status', 'approved');
      this.render();
      this.parent.assessStartable();
      return this.trigger('calculateHours');
    };

    WorkGroup.prototype.rejectGroup = function(event) {
      var _this = this;
      event.preventDefault();
      if (this.$rejectButton.hasClass('disabled')) {
        return;
      }
      this.group.status = 'rejected';
      this.$titleInput.attr('readonly', 'readonly').off('keyup');
      this.$approveButton.add(this.$rejectButton).addClass('disabled');
      this.group.updateAttribute('status', 'rejected');
      _.each(Projectionable.Requirement.findAllByAttribute('group_id', this.group.id), function(req) {
        return req.status = 'rejected';
      });
      this.render();
      this.parent.assessStartable();
      return this.trigger('calculateHours');
    };

    WorkGroup.prototype.deleteGroup = function(event) {
      var index;
      event.preventDefault();
      index = this.group.index;
      if (this.group.__proto__.hasOwnProperty('id')) {
        this.group.destroy();
      }
      this.release();
      this.trigger('calculateHours');
      if (this.parent.project.status === 'started') {
        this.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.render();
    };

    WorkGroup.prototype.revertGroup = function(event) {
      event.preventDefault();
      this.group.status = 'pending';
      this.group.updateAttribute('status', 'pending');
      this.trigger('calculateHours');
      if (this.parent.project.status === 'started') {
        this.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.render();
    };

    WorkGroup.prototype.clientRevertGroup = function(event) {
      event.preventDefault();
      this.group.status = 'requested';
      this.group.updateAttribute('status', 'requested');
      this.trigger('calculateHours');
      if (this.parent.project.status === 'started') {
        this.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.render();
    };

    WorkGroup.prototype.clientApproveGroup = function(event) {
      event.preventDefault();
      this.group.status = 'approved';
      this.group.updateAttribute('status', 'approved');
      this.trigger('calculateHours');
      if (this.parent.project.status === 'started') {
        this.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.render();
    };

    WorkGroup.prototype.clientRejectGroup = function(event) {
      event.preventDefault();
      this.group.status = 'rejected';
      this.group.updateAttribute('status', 'rejected');
      this.trigger('calculateHours');
      if (this.parent.project.status === 'started') {
        this.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.render();
    };

    WorkGroup.prototype.getContext = function() {
      return {
        project: this.parent.project,
        group: this.group
      };
    };

    WorkGroup.prototype.render = function() {
      var context, _ref;
      context = this.getContext();
      this.$el.attr('data-group-id', this.group.id);
      this.html(this.view('work_editor_editor-group')(context));
      this.addAll();
      if (this.parent.project.status === 'pending') {
        if (!this.group.__proto__.hasOwnProperty('id')) {
          this.$titleInput.on('keyup', this.createNewGroup);
        } else if ((_ref = this.parent.project.permission) === 'owner' || _ref === 'coworker') {
          if (this.group.status === 'pending') {
            this.$titleInput.on('blur', this.saveTitle);
            this.$deleteLink.on('click', this.deleteGroup);
          } else if (this.group.status === 'requested') {
            this.$approveButton.on('click', this.approveGroup);
            this.$rejectButton.on('click', this.rejectGroup);
          }
        } else if (this.parent.project.permission === 'client') {
          if (this.group.status === 'requested') {
            this.$titleInput.on('blur', this.saveTitle);
            this.$deleteLink.on('click', this.deleteGroup);
          } else if (this.group.status === 'pending') {
            this.$approveButton.on('click', this.approveGroup);
            this.$rejectButton.on('click', this.rejectGroup);
          }
        }
      }
      if (this.parent.project.permission === 'owner') {
        this.$ownerRevertLink.click(this.revertGroup);
        this.$ownerDeleteLink.click(this.deleteGroup);
      } else if (this.parent.project.permission === 'client') {
        this.$clientRevertLink.click(this.clientRevertGroup);
      }
      return this;
    };

    return WorkGroup;

  })(Spine.Controller);

  WorkRequirement = (function(_super) {

    __extends(WorkRequirement, _super);

    function WorkRequirement() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.clientRejectRequirement = __bind(this.clientRejectRequirement, this);

      this.clientApproveRequirement = __bind(this.clientApproveRequirement, this);

      this.clientRevertRequirement = __bind(this.clientRevertRequirement, this);

      this.revertRequirement = __bind(this.revertRequirement, this);

      this.deleteRequirement = __bind(this.deleteRequirement, this);

      this.rejectRequirement = __bind(this.rejectRequirement, this);

      this.approveRequirement = __bind(this.approveRequirement, this);

      this.updateApproveButtonStatus = __bind(this.updateApproveButtonStatus, this);

      this.saveHours = __bind(this.saveHours, this);

      this.saveTitle = __bind(this.saveTitle, this);

      this.createNewRequirement = __bind(this.createNewRequirement, this);

      this.arrowToggle = __bind(this.arrowToggle, this);
      WorkRequirement.__super__.constructor.apply(this, arguments);
    }

    WorkRequirement.prototype.tag = 'li';

    WorkRequirement.prototype.className = 'edit-req-wrapper clearfix';

    WorkRequirement.prototype.elements = {
      '.requirement-title-input': '$titleInput',
      '.requirement-hours-input': '$hoursInput',
      '.requirement-dollars': '$dollarsDisplay',
      '.requirement-delete-wrapper': '$deleteWrapper',
      '.requirement-delete-link': '$deleteLink',
      '.requirement-status-wrapper': '$statusWrapper',
      '.requirement-approve-button': '$approveButton',
      '.requirement-reject-button': '$rejectButton',
      '.owner-delete-requirement': '$ownerDeleteLink',
      '.owner-revert-requirement': '$ownerRevertLink',
      '.client-revert-requirement': '$clientRevertLink',
      '.client-approve-requirement': '$clientApproveLink',
      '.client-reject-requirement': '$clientRejectLink'
    };

    WorkRequirement.prototype.arrowToggle = function(event) {
      var code;
      code = event.keyCode ? event.keyCode : event.charCode;
      switch (code) {
        case 38:
          return console.log('up');
        case 40:
          return console.log('down');
      }
    };

    WorkRequirement.prototype.createNewRequirement = function() {
      var hours, req, title, _ref;
      title = $.trim(this.$titleInput.val());
      if (title === '') {
        return;
      }
      this.$titleInput.off('keyup');
      hours = parseFloat($.trim(this.$hoursInput.val()));
      if (isNaN(hours)) {
        hours = 0;
      }
      $.extend(this.requirement, {
        title: title,
        hours: hours
      });
      this.requirement = Projectionable.Requirement.create(this.requirement);
      req = App.makeRequirementTemplate(this.parent.group.id, Projectionable.Requirement.findAllByAttribute('group_id', this.parent.group.id).length);
      this.parent.addOne(req);
      this.$deleteWrapper.add(this.$statusWrapper).addClass('active');
      this.$titleInput.on('blur', this.saveTitle);
      this.$deleteLink.on('click', this.deleteRequirement);
      if ((_ref = this.parent.parent.project.permission) === 'owner' || _ref === 'coworker') {
        return this.$hoursInput.on('blur', this.saveHours);
      }
    };

    WorkRequirement.prototype.saveTitle = function() {
      var title;
      title = this.$titleInput.val();
      if (title === this.requirement.title) {
        return;
      }
      return this.requirement.updateAttribute('title', title);
    };

    WorkRequirement.prototype.saveHours = function() {
      var dollars, hours;
      if (this.$hoursInput.attr('readonly') === 'readonly') {
        return;
      }
      hours = parseFloat($.trim(this.$hoursInput.val()));
      this.requirement.updateAttribute('hours', hours);
      this.parent.trigger('calculateHours');
      dollars = parseFloat(this.parent.parent.project.rate) * parseFloat(hours);
      if (isNaN(dollars) || this.requirement.status === 'rejected') {
        dollars = ' --';
      } else {
        dollars = App.formatNumber(dollars);
      }
      return this.$dollarsDisplay.text("$" + dollars);
    };

    WorkRequirement.prototype.updateApproveButtonStatus = function() {
      var hours, oldHours;
      if (this.$hoursInput.attr('readonly') === 'readonly') {
        return;
      }
      hours = parseFloat($.trim(this.$hoursInput.val()));
      oldHours = this.requirement.hours;
      if (!isNaN(hours) && isNaN(parseFloat(oldHours))) {
        return this.$approveButton.removeClass('disabled');
      } else if (isNaN(hours) && !isNaN(parseFloat(oldHours))) {
        return this.$approveButton.addClass('disabled');
      }
    };

    WorkRequirement.prototype.approveRequirement = function(event) {
      event.preventDefault();
      if (this.$approveButton.hasClass('disabled')) {
        return;
      }
      this.requirement.status = 'approved';
      this.$titleInput.add(this.$hoursInput).attr('readonly', 'readonly').off('keyup');
      this.$approveButton.add(this.$rejectButton).addClass('disabled');
      this.requirement.updateAttribute('status', 'approved');
      this.parent.trigger('calculateHours');
      if (this.parent.group.status !== 'approved') {
        this.parent.group.status = 'approved';
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.rejectRequirement = function(event) {
      event.preventDefault();
      if (this.$rejectButton.hasClass('disabled')) {
        return;
      }
      this.requirement.status = 'rejected';
      this.$titleInput.add(this.$hoursInput).attr('readonly', 'readonly').off('keyup');
      this.$approveButton.add(this.$rejectButton).addClass('disabled');
      this.requirement.updateAttribute('status', 'rejected');
      this.render();
      this.parent.parent.assessStartable();
      return this.parent.trigger('calculateHours');
    };

    WorkRequirement.prototype.deleteRequirement = function(event) {
      var index;
      event.preventDefault();
      index = this.requirement.index;
      if (this.requirement.__proto__.hasOwnProperty('id')) {
        this.requirement.destroy();
      }
      this.release();
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.revertRequirement = function(event) {
      event.preventDefault();
      this.requirement.status = 'pending';
      this.requirement.updateAttribute('status', 'pending');
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.clientRevertRequirement = function(event) {
      event.preventDefault();
      this.requirement.status = 'requested';
      this.requirement.updateAttribute('status', 'requested');
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.clientApproveRequirement = function(event) {
      event.preventDefault();
      if (!isNaN(parseFloat(this.requirement.hours))) {
        this.requirement.status = 'approved';
        this.requirement.updateAttribute('status', 'approved');
      } else {
        this.requirement.status = 'requested';
        this.requirement.updateAttribute('status', 'requested');
      }
      if (this.parent.group.status !== 'approved') {
        this.parent.group.status = 'approved';
      }
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.clientRejectRequirement = function(event) {
      event.preventDefault();
      this.requirement.status = 'rejected';
      this.requirement.updateAttribute('status', 'rejected');
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.getContext = function() {
      return {
        project: this.parent.parent.project,
        group: this.parent.group,
        req: this.requirement
      };
    };

    WorkRequirement.prototype.render = function() {
      var context, _ref;
      context = this.getContext();
      this.$el.attr('data-req-id', this.requirement.id);
      this.html(this.view('work_editor_editor-requirement')(context));
      if (this.parent.parent.project.status === 'pending') {
        if (!this.requirement.__proto__.hasOwnProperty('id')) {
          this.$titleInput.on('keyup', this.createNewRequirement);
        } else if ((_ref = this.parent.parent.project.permission) === 'owner' || _ref === 'coworker') {
          if (this.requirement.status === 'pending') {
            this.$titleInput.on('blur', this.saveTitle);
            this.$hoursInput.on('blur', this.saveHours);
            this.$hoursInput.on('keyup', this.updateApproveButtonStatus);
            this.$deleteLink.on('click', this.deleteRequirement);
          } else if (this.requirement.status === 'requested') {
            this.$hoursInput.on('blur', this.saveHours);
            this.$hoursInput.on('keyup', this.updateApproveButtonStatus);
            this.$approveButton.on('click', this.approveRequirement);
            this.$rejectButton.on('click', this.rejectRequirement);
          }
        } else if (this.parent.parent.project.permission === 'client') {
          if (this.requirement.status === 'requested') {
            this.$titleInput.on('blur', this.saveTitle);
            this.$deleteLink.on('click', this.deleteRequirement);
          } else if (this.requirement.status === 'pending') {
            this.$approveButton.on('click', this.approveRequirement);
            this.$rejectButton.on('click', this.rejectRequirement);
          }
        }
      }
      if (this.parent.parent.project.permission === 'owner') {
        this.$ownerRevertLink.click(this.revertRequirement);
        this.$ownerDeleteLink.click(this.deleteRequirement);
      } else if (this.parent.parent.project.permission === 'client') {
        this.$clientRevertLink.click(this.clientRevertRequirement);
        this.$clientApproveLink.click(this.clientApproveRequirement);
        this.$clientRejectLink.click(this.clientRejectRequirement);
      }
      return this;
    };

    return WorkRequirement;

  })(Spine.Controller);

}).call(this);
