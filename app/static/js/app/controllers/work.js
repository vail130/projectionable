// Generated by CoffeeScript 1.3.3
(function() {
  var CollaborateModal, GroupManager, ProjectEditor, ProjectManager, ProjectPreview, StoryWorkView, WorkPermission, WorkRequirement,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Projectionable.Work = (function(_super) {

    __extends(Work, _super);

    function Work() {
      var _this = this;
      this.el = $('work');
      Work.__super__.constructor.apply(this, arguments);
      this.html(this.view('work_work-structure'));
      this.projectManager = new ProjectManager({
        el: $('#work-project-manager'),
        parent: this
      });
      this.projectEditor = null;
      this.routes({
        '/projects': function() {
          App.navigation.render();
          return _this.projectManager.render().active();
        },
        '/projects/:id': function(params) {
          var project;
          project = Projectionable.Project.findByAttribute('id', parseInt(params.id));
          if (typeof project === 'undefined') {
            return _this.navigate('/projects');
          } else {
            App.navigation.render();
            _this.projectManager.deactivate();
            _this.projectEditor.release();
            return _this.projectEditor = new ProjectEditor({
              el: $('#work-project-editor'),
              parent: _this,
              project: project
            });
          }
        }
      });
    }

    return Work;

  })(Spine.Controller);

  ProjectManager = (function(_super) {

    __extends(ProjectManager, _super);

    function ProjectManager() {
      this.chooseProject = __bind(this.chooseProject, this);

      this.newProject = __bind(this.newProject, this);

      this.render = __bind(this.render, this);

      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);
      ProjectManager.__super__.constructor.apply(this, arguments);
      Projectionable.Project.bind('refresh change', this.addAll);
    }

    ProjectManager.prototype.className = 'project-manager';

    ProjectManager.prototype.elements = {
      '.project-list': '$projectList',
      '.new-project-button': '$newProjectButton'
    };

    ProjectManager.prototype.addOne = function(project) {
      var controller;
      controller = new ProjectPreview({
        parent: this,
        project: project,
        selectedID: (this.parent.projectEditor !== null ? this.parent.projectEditor.project.id : null)
      });
      this.$projectList.append(controller.render().el);
      return this;
    };

    ProjectManager.prototype.addAll = function() {
      var project, projects, _i, _len;
      this.$projectList.empty();
      projects = Projectionable.Project.all();
      if (projects.length > 0) {
        for (_i = 0, _len = projects.length; _i < _len; _i++) {
          project = projects[_i];
          this.addOne(project);
        }
      } else {
        this.$projectList.html(this.view('work_manager_manager-no-previews'));
      }
      return this;
    };

    ProjectManager.prototype.render = function() {
      this.html(this.view('work_manager_manager'));
      this.addAll();
      return this;
    };

    ProjectManager.prototype.events = {
      '.new-project-button': 'newProject',
      '.project-link': 'chooseProject'
    };

    ProjectManager.prototype.newProject = function(event) {
      event.preventDefault();
      Projectionable.Project.create(App.makeProjectTemplate());
      return this.addAll();
    };

    ProjectManager.prototype.chooseProject = function(event) {
      event.preventDefault();
      return this.navigate("/projects" + this.project.id);
    };

    return ProjectManager;

  })(Spine.Controller);

  ProjectPreview = (function(_super) {

    __extends(ProjectPreview, _super);

    function ProjectPreview() {
      this.render = __bind(this.render, this);

      this.editProject = __bind(this.editProject, this);

      this.processClick = __bind(this.processClick, this);

      this.unpressPreview = __bind(this.unpressPreview, this);

      this.pressPreview = __bind(this.pressPreview, this);
      ProjectPreview.__super__.constructor.apply(this, arguments);
      this.project.bind('update', this.render);
      this.project.bind('destroy', this.release);
    }

    ProjectPreview.prototype.tag = 'li';

    ProjectPreview.prototype.className = 'project-wrapper clearfix';

    ProjectPreview.prototype.events = {
      'click a.edit-link': 'editProject',
      'click a.delete': 'remove',
      'mousedown': 'pressPreview',
      'mouseup': 'unpressPreview',
      'mouseout': 'unpressPreview',
      'click': 'processClick'
    };

    ProjectPreview.prototype.pressPreview = function(event) {
      var $target;
      $target = $(event.target);
      if (!$target.hasClass('options-button') && !$target.parent().hasClass('options-button')) {
        return this.$el.addClass('pressed');
      }
    };

    ProjectPreview.prototype.unpressPreview = function() {
      return this.$el.removeClass('pressed');
    };

    ProjectPreview.prototype.processClick = function(event) {
      var $target;
      $target = $(event.target);
      if (!$target.hasClass('options-button') && !$target.parent().hasClass('options-button')) {
        if ($target.hasClass('title')) {
          event.preventDefault();
        }
        App.project = this.project;
        return this.navigate('/editor');
      }
    };

    ProjectPreview.prototype.editProject = function(event) {
      event.preventDefault();
      App.project = this.project;
      return this.navigate('/editor');
    };

    ProjectPreview.prototype.preventDefault = function(event) {
      return event.preventDefault();
    };

    ProjectPreview.prototype.remove = function(event) {
      event.preventDefault();
      event.stopPropagation();
      this.project.destroy();
      this.release();
      return App.project = null;
    };

    ProjectPreview.prototype.render = function() {
      this.html(this.view('work_manager_manager-preview')({
        project: this.project
      }));
      return this;
    };

    return ProjectPreview;

  })(Spine.Controller);

  ProjectEditor = (function(_super) {

    __extends(ProjectEditor, _super);

    function ProjectEditor() {
      this.openCollaborateModal = __bind(this.openCollaborateModal, this);

      this.titleInputEnter = __bind(this.titleInputEnter, this);

      this.saveTitle = __bind(this.saveTitle, this);

      this.editTitle = __bind(this.editTitle, this);

      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);
      ProjectEditor.__super__.constructor.apply(this, arguments);
    }

    ProjectEditor.prototype.className = 'project-editor';

    ProjectEditor.prototype.elements = {
      '.project-title': '$title',
      '.project-title-edit-link': '$titleEditLink',
      '.project-title-input': '$titleInput',
      '.project-title-save-button': '$titleSaveButton',
      '.reports-button': '$reportsButton',
      '.collaborate-button': '$collaborateButton',
      '#project-front-end-groups': '$frontEndGroups',
      '#project-back-end-groups': '$backEndGroups',
      '#project-front-end-models': '$frontEndModels',
      '#project-back-end-models': '$backEndModels',
      '#project-collaborate-modal': '$collaborateModal',
      '#project-reports-modal': '$reportsModal'
    };

    ProjectEditor.prototype.getContext = function() {
      return {
        project: this.project
      };
    };

    ProjectEditor.prototype.render = function() {
      this.html(this.view('work_editor_editor')(this.getContext()));
      this.frontEndGroups = new GroupManager({
        parent: this,
        type: 'front',
        el: $('#project-front-end-groups')
      });
      this.frontEndModels = new ModelManager({
        parent: this,
        type: 'front',
        el: $('#project-front-end-models')
      });
      this.backEndGroups = new GroupManager({
        parent: this,
        type: 'back',
        el: $('#project-back-end-groups')
      });
      this.backEndModels = new ModelManager({
        parent: this,
        type: 'back',
        el: $('#project-back-end-models')
      });
      if (this.project.permission === 'owner') {
        this.collaborateModal = new CollaborateModal({
          parent: this
        });
        this.$collaborateModal.html(this.collaborateModal.render().el);
      }
      return this;
    };

    ProjectEditor.prototype.events = {
      'click .title-edit-link': 'editTitle',
      'click .title-save-button': 'saveTitle',
      'keypress .title-input': 'titleInputEnter',
      'click .collaborate-button': 'openCollaborateModal'
    };

    ProjectEditor.prototype.editTitle = function(event) {
      event.preventDefault();
      this.$titleEditLink.add(this.$title).hide();
      return this.$titleInput.val(this.project.title).add(this.$titleSaveButton).show();
    };

    ProjectEditor.prototype.saveTitle = function(event) {
      var title;
      title = this.$titleInput.val();
      if (title !== this.project.title) {
        this.project.updateAttribute('title', title);
      }
      this.$titleInput.add(this.$titleSaveButton).hide();
      return this.$titleEditLink.add(this.$title).show();
    };

    ProjectEditor.prototype.titleInputEnter = function(event) {
      var code;
      code = (event.charCode ? event.charCode : event.keyCode);
      if (code === 13) {
        return this.$titleSaveButton.trigger('click');
      }
    };

    ProjectEditor.prototype.openCollaborateModal = function(event) {
      event.preventDefault();
      return this.collaborateModal.show();
    };

    return ProjectEditor;

  })(Spine.Controller);

  GroupManager = (function(_super) {

    __extends(GroupManager, _super);

    function GroupManager() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.initSortable = __bind(this.initSortable, this);

      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);
      GroupManager.__super__.constructor.apply(this, arguments);
      this.children = [];
    }

    GroupManager.prototype.className = 'group-container';

    GroupManager.prototype.elements = {
      '.group-list': '$groupList'
    };

    GroupManager.prototype.addOne = function(group) {
      var controller;
      controller = new ProjectGroup({
        parent: this,
        group: group
      });
      this.children.push(controller);
      return this.$groupList.append(controller.render().el);
    };

    GroupManager.prototype.addAll = function() {
      var group, groups, _i, _len;
      groups = _.sortBy(Projectionable.RequirementGroup.findAllByAttribute('project_id', this.parent.project.id), 'index');
      this.$groupList.empty();
      this.children = [];
      if (groups.length > 0) {
        for (_i = 0, _len = groups.length; _i < _len; _i++) {
          group = groups[_i];
          this.addOne(group);
        }
      }
      if (this.project.status === 'pending') {
        group = App.makeGroupTemplate(this.project.id, groups.length);
        this.addOne(group);
      }
      return this;
    };

    GroupManager.prototype.initSortable = function() {
      var sortableOptions,
        _this = this;
      sortableOptions = {
        axis: 'y',
        containment: 'parent',
        scrollSensitivity: 100,
        stop: function() {
          var groups;
          groups = [];
          _this.$groupList.children('li').each(function(index, el) {
            var groupID;
            groupID = parseInt($(el).data('group-id'));
            if (!isNaN(groupID)) {
              return groups.push(Projectionable.RequirementGroup.findByAttribute('id', groupID));
            }
          });
          return _.each(groups, function(group, index) {
            return group.updateAttribute('index', index);
          });
        }
      };
      this.$groupList.sortable(sortableOptions);
      return this;
    };

    GroupManager.prototype.getContext = function() {
      return {
        project: this.parent.project,
        type: this.type,
        groups: _.sortBy(Projectionable.RequirementGroup.findAllByAttribute('project_id', this.project.id), 'index')
      };
    };

    GroupManager.prototype.render = function() {
      this.html(this.view('work_editor-group-manager')(this.getContext()));
      return this;
    };

    return GroupManager;

  })(Spine.Controller);

  StoryWorkView = (function(_super) {

    __extends(StoryWorkView, _super);

    function StoryWorkView() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.deleteGroup = __bind(this.deleteGroup, this);

      this.saveTitle = __bind(this.saveTitle, this);
      StoryWorkView.__super__.constructor.apply(this, arguments);
    }

    StoryWorkView.prototype.tag = 'li';

    StoryWorkView.prototype.className = '';

    StoryWorkView.prototype.elements = {
      '.group-title-input': '$titleInput',
      '.group-delete-button': '$deleteLink'
    };

    StoryWorkView.prototype.saveTitle = function() {
      var title;
      title = this.$titleInput.val();
      if (title === this.group.title) {
        return;
      }
      return this.group.updateAttribute('title', title);
    };

    StoryWorkView.prototype.deleteGroup = function(event) {
      var index;
      event.preventDefault();
      index = this.group.index;
      if (this.group.__proto__.hasOwnProperty('id')) {
        this.group.destroy();
      }
      this.release();
      if (this.parent.project.status === 'started') {
        this.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.render();
    };

    StoryWorkView.prototype.getContext = function() {
      return {
        project: this.parent.project,
        group: this.group
      };
    };

    StoryWorkView.prototype.render = function() {
      this.html(this.view('work_editor_editor-group')(this.getContext()));
      return this;
    };

    return StoryWorkView;

  })(Spine.Controller);

  WorkRequirement = (function(_super) {

    __extends(WorkRequirement, _super);

    function WorkRequirement() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.clientRejectRequirement = __bind(this.clientRejectRequirement, this);

      this.clientApproveRequirement = __bind(this.clientApproveRequirement, this);

      this.clientRevertRequirement = __bind(this.clientRevertRequirement, this);

      this.revertRequirement = __bind(this.revertRequirement, this);

      this.deleteRequirement = __bind(this.deleteRequirement, this);

      this.rejectRequirement = __bind(this.rejectRequirement, this);

      this.approveRequirement = __bind(this.approveRequirement, this);

      this.updateApproveButtonStatus = __bind(this.updateApproveButtonStatus, this);

      this.saveHours = __bind(this.saveHours, this);

      this.saveTitle = __bind(this.saveTitle, this);

      this.createNewRequirement = __bind(this.createNewRequirement, this);

      this.arrowToggle = __bind(this.arrowToggle, this);
      WorkRequirement.__super__.constructor.apply(this, arguments);
    }

    WorkRequirement.prototype.tag = 'li';

    WorkRequirement.prototype.className = 'edit-req-wrapper clearfix';

    WorkRequirement.prototype.elements = {
      '.requirement-title-input': '$titleInput',
      '.requirement-hours-input': '$hoursInput',
      '.requirement-dollars': '$dollarsDisplay',
      '.requirement-delete-wrapper': '$deleteWrapper',
      '.requirement-delete-link': '$deleteLink',
      '.requirement-status-wrapper': '$statusWrapper',
      '.requirement-approve-button': '$approveButton',
      '.requirement-reject-button': '$rejectButton',
      '.owner-delete-requirement': '$ownerDeleteLink',
      '.owner-revert-requirement': '$ownerRevertLink',
      '.client-revert-requirement': '$clientRevertLink',
      '.client-approve-requirement': '$clientApproveLink',
      '.client-reject-requirement': '$clientRejectLink'
    };

    WorkRequirement.prototype.arrowToggle = function(event) {
      var code;
      code = event.keyCode ? event.keyCode : event.charCode;
      switch (code) {
        case 38:
          return console.log('up');
        case 40:
          return console.log('down');
      }
    };

    WorkRequirement.prototype.createNewRequirement = function() {
      var hours, req, title, _ref;
      title = $.trim(this.$titleInput.val());
      if (title === '') {
        return;
      }
      this.$titleInput.off('keyup');
      hours = parseFloat($.trim(this.$hoursInput.val()));
      if (isNaN(hours)) {
        hours = 0;
      }
      $.extend(this.requirement, {
        title: title,
        hours: hours
      });
      this.requirement = Projectionable.Requirement.create(this.requirement);
      req = App.makeRequirementTemplate(this.parent.group.id, Projectionable.Requirement.findAllByAttribute('group_id', this.parent.group.id).length);
      this.parent.addOne(req);
      this.$deleteWrapper.add(this.$statusWrapper).addClass('active');
      this.$titleInput.on('blur', this.saveTitle);
      this.$deleteLink.on('click', this.deleteRequirement);
      if ((_ref = this.parent.parent.project.permission) === 'owner' || _ref === 'coworker') {
        return this.$hoursInput.on('blur', this.saveHours);
      }
    };

    WorkRequirement.prototype.saveTitle = function() {
      var title;
      title = this.$titleInput.val();
      if (title === this.requirement.title) {
        return;
      }
      return this.requirement.updateAttribute('title', title);
    };

    WorkRequirement.prototype.saveHours = function() {
      var dollars, hours;
      if (this.$hoursInput.attr('readonly') === 'readonly') {
        return;
      }
      hours = parseFloat($.trim(this.$hoursInput.val()));
      this.requirement.updateAttribute('hours', hours);
      this.parent.trigger('calculateHours');
      dollars = parseFloat(this.parent.parent.project.rate) * parseFloat(hours);
      if (isNaN(dollars) || this.requirement.status === 'rejected') {
        dollars = ' --';
      } else {
        dollars = App.formatNumber(dollars);
      }
      return this.$dollarsDisplay.text("$" + dollars);
    };

    WorkRequirement.prototype.updateApproveButtonStatus = function() {
      var hours, oldHours;
      if (this.$hoursInput.attr('readonly') === 'readonly') {
        return;
      }
      hours = parseFloat($.trim(this.$hoursInput.val()));
      oldHours = this.requirement.hours;
      if (!isNaN(hours) && isNaN(parseFloat(oldHours))) {
        return this.$approveButton.removeClass('disabled');
      } else if (isNaN(hours) && !isNaN(parseFloat(oldHours))) {
        return this.$approveButton.addClass('disabled');
      }
    };

    WorkRequirement.prototype.approveRequirement = function(event) {
      event.preventDefault();
      if (this.$approveButton.hasClass('disabled')) {
        return;
      }
      this.requirement.status = 'approved';
      this.$titleInput.add(this.$hoursInput).attr('readonly', 'readonly').off('keyup');
      this.$approveButton.add(this.$rejectButton).addClass('disabled');
      this.requirement.updateAttribute('status', 'approved');
      this.parent.trigger('calculateHours');
      if (this.parent.group.status !== 'approved') {
        this.parent.group.status = 'approved';
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.rejectRequirement = function(event) {
      event.preventDefault();
      if (this.$rejectButton.hasClass('disabled')) {
        return;
      }
      this.requirement.status = 'rejected';
      this.$titleInput.add(this.$hoursInput).attr('readonly', 'readonly').off('keyup');
      this.$approveButton.add(this.$rejectButton).addClass('disabled');
      this.requirement.updateAttribute('status', 'rejected');
      this.render();
      this.parent.parent.assessStartable();
      return this.parent.trigger('calculateHours');
    };

    WorkRequirement.prototype.deleteRequirement = function(event) {
      var index;
      event.preventDefault();
      index = this.requirement.index;
      if (this.requirement.__proto__.hasOwnProperty('id')) {
        this.requirement.destroy();
      }
      this.release();
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.revertRequirement = function(event) {
      event.preventDefault();
      this.requirement.status = 'pending';
      this.requirement.updateAttribute('status', 'pending');
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.clientRevertRequirement = function(event) {
      event.preventDefault();
      this.requirement.status = 'requested';
      this.requirement.updateAttribute('status', 'requested');
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.clientApproveRequirement = function(event) {
      event.preventDefault();
      if (!isNaN(parseFloat(this.requirement.hours))) {
        this.requirement.status = 'approved';
        this.requirement.updateAttribute('status', 'approved');
      } else {
        this.requirement.status = 'requested';
        this.requirement.updateAttribute('status', 'requested');
      }
      if (this.parent.group.status !== 'approved') {
        this.parent.group.status = 'approved';
      }
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.clientRejectRequirement = function(event) {
      event.preventDefault();
      this.requirement.status = 'rejected';
      this.requirement.updateAttribute('status', 'rejected');
      this.parent.trigger('calculateHours');
      if (this.parent.parent.project.status === 'started') {
        this.parent.parent.project.updateAttribute('status', 'pending');
      }
      return this.parent.parent.render();
    };

    WorkRequirement.prototype.getContext = function() {
      return {
        project: this.parent.parent.project,
        group: this.parent.group,
        req: this.requirement
      };
    };

    WorkRequirement.prototype.render = function() {
      var context, _ref;
      context = this.getContext();
      this.$el.attr('data-req-id', this.requirement.id);
      this.html(this.view('work_editor_editor-requirement')(context));
      if (this.parent.parent.project.status === 'pending') {
        if (!this.requirement.__proto__.hasOwnProperty('id')) {
          this.$titleInput.on('keyup', this.createNewRequirement);
        } else if ((_ref = this.parent.parent.project.permission) === 'owner' || _ref === 'coworker') {
          if (this.requirement.status === 'pending') {
            this.$titleInput.on('blur', this.saveTitle);
            this.$hoursInput.on('blur', this.saveHours);
            this.$hoursInput.on('keyup', this.updateApproveButtonStatus);
            this.$deleteLink.on('click', this.deleteRequirement);
          } else if (this.requirement.status === 'requested') {
            this.$hoursInput.on('blur', this.saveHours);
            this.$hoursInput.on('keyup', this.updateApproveButtonStatus);
            this.$approveButton.on('click', this.approveRequirement);
            this.$rejectButton.on('click', this.rejectRequirement);
          }
        } else if (this.parent.parent.project.permission === 'client') {
          if (this.requirement.status === 'requested') {
            this.$titleInput.on('blur', this.saveTitle);
            this.$deleteLink.on('click', this.deleteRequirement);
          } else if (this.requirement.status === 'pending') {
            this.$approveButton.on('click', this.approveRequirement);
            this.$rejectButton.on('click', this.rejectRequirement);
          }
        }
      }
      if (this.parent.parent.project.permission === 'owner') {
        this.$ownerRevertLink.click(this.revertRequirement);
        this.$ownerDeleteLink.click(this.deleteRequirement);
      } else if (this.parent.parent.project.permission === 'client') {
        this.$clientRevertLink.click(this.clientRevertRequirement);
        this.$clientApproveLink.click(this.clientApproveRequirement);
        this.$clientRejectLink.click(this.clientRejectRequirement);
      }
      return this;
    };

    return WorkRequirement;

  })(Spine.Controller);

  CollaborateModal = (function(_super) {

    __extends(CollaborateModal, _super);

    function CollaborateModal() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.enableClient = __bind(this.enableClient, this);

      this.hideStripeButton = __bind(this.hideStripeButton, this);

      this.showStripeButton = __bind(this.showStripeButton, this);

      this.hide = __bind(this.hide, this);

      this.show = __bind(this.show, this);

      this.addAllPermissions = __bind(this.addAllPermissions, this);

      this.addOneCoworker = __bind(this.addOneCoworker, this);

      this.addOneClient = __bind(this.addOneClient, this);

      this.validateEmail = __bind(this.validateEmail, this);

      this.validateNewClient = __bind(this.validateNewClient, this);

      this.validateNewCoworker = __bind(this.validateNewCoworker, this);

      this.clientInputEnter = __bind(this.clientInputEnter, this);

      this.coworkerInputEnter = __bind(this.coworkerInputEnter, this);

      this.inviteClient = __bind(this.inviteClient, this);

      this.inviteCoworker = __bind(this.inviteCoworker, this);
      CollaborateModal.__super__.constructor.apply(this, arguments);
    }

    CollaborateModal.prototype.elements = {
      '.sharing-modal-close-button': '$sharingModalCloseButton',
      '.sharing-modal': '$sharingModal',
      '.sharing-modal-shadow': '$sharingModalShadow',
      '.coworker-input': '$coworkerInput',
      '.client-input': '$clientInput',
      '.invite-coworker-button': '$coworkerButton',
      '.invite-client-button': '$clientButton',
      '.coworker-list': '$coworkerList',
      '.client-list': '$clientList'
    };

    CollaborateModal.prototype.events = {
      'keyup .coworker-input': 'validateNewCoworker',
      'keyup .client-input': 'validateNewClient',
      'keypress .coworker-input': 'coworkerInputEnter',
      'keypress .client-input': 'clientInputEnter',
      'click .invite-coworker-button': 'inviteCoworker',
      'click .invite-client-button': 'inviteClient'
    };

    CollaborateModal.prototype.inviteCoworker = function(event) {
      var perm;
      event.preventDefault();
      if (this.$coworkerButton.hasClass('disabled')) {
        return;
      }
      perm = Projectionable.Permission.create({
        email: $.trim(this.$coworkerInput.val()),
        project_id: this.parent.project.id,
        permission: 'coworker'
      });
      this.addAllPermissions();
      return this.$coworkerInput.val('');
    };

    CollaborateModal.prototype.inviteClient = function(event) {
      var perm;
      event.preventDefault();
      if (this.$clientButton.hasClass('disabled')) {
        return;
      }
      perm = Projectionable.Permission.create({
        email: $.trim(this.$clientInput.val()),
        project_id: this.parent.project.id,
        permission: 'client'
      });
      this.addAllPermissions();
      return this.$clientInput.val('');
    };

    CollaborateModal.prototype.coworkerInputEnter = function(event) {
      var code;
      code = event.charCode ? event.charCode : event.keyCode;
      if (code === 13) {
        return this.$coworkerButton.trigger('click');
      }
    };

    CollaborateModal.prototype.clientInputEnter = function(event) {
      var code;
      code = event.charCode ? event.charCode : event.keyCode;
      if (code === 13) {
        return this.$clientButton.trigger('click');
      }
    };

    CollaborateModal.prototype.validateNewCoworker = function() {
      if (this.validateEmail(this.$coworkerInput.val())) {
        return this.$coworkerButton.removeClass('disabled');
      } else {
        return this.$coworkerButton.addClass('disabled');
      }
    };

    CollaborateModal.prototype.validateNewClient = function() {
      if (this.validateEmail(this.$clientInput.val())) {
        return this.$clientButton.removeClass('disabled');
      } else {
        return this.$clientButton.addClass('disabled');
      }
    };

    CollaborateModal.prototype.validateEmail = function(email) {
      return email.toString().search(/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/) > -1;
    };

    CollaborateModal.prototype.addOneClient = function(client) {
      var controller;
      controller = new WorkPermission({
        parent: this,
        permission: client,
        type: 'client'
      });
      return this.$clientList.append(controller.render().el);
    };

    CollaborateModal.prototype.addOneCoworker = function(coworker) {
      var controller;
      controller = new WorkPermission({
        parent: this,
        permission: coworker,
        type: 'coworker'
      });
      return this.$coworkerList.append(controller.render().el);
    };

    CollaborateModal.prototype.addAllPermissions = function() {
      var client, clients, coworker, coworkers, permissions, _i, _j, _len, _len1;
      this.$coworkerList.empty();
      permissions = Projectionable.Permission.findAllByAttribute('project_id', this.parent.project.id);
      coworkers = _.where(permissions, {
        permission: 'coworker'
      });
      if (coworkers.length > 0) {
        for (_i = 0, _len = coworkers.length; _i < _len; _i++) {
          coworker = coworkers[_i];
          this.addOneCoworker(coworker);
        }
      } else {
        this.$coworkerList.html("<div class='permission empty'><span>No coworkers.</span></div>");
      }
      if (this.parent.project.client_enabled === true) {
        this.$clientList.empty();
        clients = _.where(permissions, {
          permission: 'client'
        });
        if (clients.length > 0) {
          for (_j = 0, _len1 = clients.length; _j < _len1; _j++) {
            client = clients[_j];
            this.addOneClient(client);
          }
        } else {
          this.$clientList.html("<div class='permission empty'><span>No clients.</span></div>");
        }
      }
      return this;
    };

    CollaborateModal.prototype.show = function() {
      var _this = this;
      this.$sharingModal.fadeIn(500, function() {
        return _this.$sharingModal.find('input').first().get(0).focus();
      });
      if (this.parent.project.client_enabled === false) {
        return setTimeout(this.showStripeButton, 10);
      }
    };

    CollaborateModal.prototype.hide = function(event) {
      var _this = this;
      if (event == null) {
        event = null;
      }
      if (event !== null) {
        event.preventDefault();
      }
      $('#stripe-button-container').fadeOut(500);
      return this.$sharingModal.fadeOut(500, function() {
        return _this.hideStripeButton();
      });
    };

    CollaborateModal.prototype.showStripeButton = function() {
      var offset;
      offset = this.$sharingModal.find('.right-half').offset();
      $('#stripe-button-container').css({
        display: 'none',
        top: offset.top + 100,
        left: offset.left
      }).fadeIn(490);
      return this;
    };

    CollaborateModal.prototype.hideStripeButton = function() {
      $('#stripe-button-container').css({
        top: -100,
        left: -200
      });
      return this;
    };

    CollaborateModal.prototype.enableClient = function(event) {
      event.preventDefault();
      this.parent.project.updateAttribute('client_enabled', true);
      return this.hideStripeButton().render().showSharingModal();
    };

    CollaborateModal.prototype.getContext = function() {
      return {
        project: this.parent.project
      };
    };

    CollaborateModal.prototype.render = function() {
      this.html(this.view('work_editor_editor-permission-modal')(this.getContext()));
      this.addAllPermissions();
      this.$sharingModalCloseButton.off('click').on('click', this.hideSharingModal);
      this.$sharingModalShadow.off('click').on('click', this.hideSharingModal);
      $('#stripe-button-container .enable-client-button').off('click').on('click', this.enableClient);
      return this;
    };

    return CollaborateModal;

  })(Spine.Controller);

  WorkPermission = (function(_super) {

    __extends(WorkPermission, _super);

    function WorkPermission() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);

      this.deletePermission = __bind(this.deletePermission, this);
      WorkPermission.__super__.constructor.apply(this, arguments);
    }

    WorkPermission.prototype.tag = 'li';

    WorkPermission.prototype.className = 'permission clearfix';

    WorkPermission.prototype.events = {
      'click .remove-link': 'deletePermission'
    };

    WorkPermission.prototype.deletePermission = function(event) {
      event.preventDefault();
      this.permission.destroy();
      this.release();
      this.parent.addAllPermissions();
      return this;
    };

    WorkPermission.prototype.getContext = function() {
      return {
        project: this.parent.parent.project,
        permission: this.permission,
        type: this.type
      };
    };

    WorkPermission.prototype.render = function() {
      if (this.parent.parent.project.permission === 'owner') {
        this.html(this.view('work_editor_editor-permission')(this.getContext()));
      }
      return this;
    };

    return WorkPermission;

  })(Spine.Controller);

}).call(this);
