// Generated by CoffeeScript 1.3.3
(function() {
  var ProjectPreview,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Projectionable.Manager = (function(_super) {

    __extends(Manager, _super);

    function Manager() {
      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);

      var _this = this;
      Manager.__super__.constructor.apply(this, arguments);
      App.Manager = this;
      $('#work').html(this.view('work_work-structure'));
      Project.bind('create', this.addOne);
      Project.bind('refresh change', this.addAll);
      this.routes({
        '/manager': function() {
          App.project = null;
          App.trigger('renderNavigation', 'manager');
          _this.render().active();
          _this.lock = new App.Lock({
            el: $('#work')
          });
          _this.lock.start();
          return $.when(App.projectPromise).done(function() {
            return _this.lock.stop().remove();
          });
        }
      });
    }

    Manager.prototype.className = 'work-manager';

    Manager.prototype.elements = {
      '.manager-projects': '$projectList'
    };

    Manager.prototype.events = {
      'click .new-project-button': 'new'
    };

    Manager.prototype["new"] = function(event) {
      var project;
      event.preventDefault();
      project = Project.create(App.makeProjectTemplate());
      return this.addOne(project);
    };

    Manager.prototype.addOne = function(project) {
      var controller;
      controller = new ProjectPreview({
        project: project
      });
      return this.$projectList.append(controller.render().el);
    };

    Manager.prototype.addAll = function() {
      var project, projects, _i, _len;
      this.$projectList.empty();
      projects = Project.all();
      if (projects.length > 0) {
        for (_i = 0, _len = projects.length; _i < _len; _i++) {
          project = projects[_i];
          this.addOne(project);
        }
      } else {
        this.$projectList.html(this.view('work_manager_manager-no-previews'));
      }
      return this;
    };

    Manager.prototype.render = function() {
      this.html(this.view('work_manager_manager'));
      $('#work-manager').html(this.$el);
      this.addAll();
      return this;
    };

    return Manager;

  })(Spine.Controller);

  ProjectPreview = (function(_super) {

    __extends(ProjectPreview, _super);

    function ProjectPreview() {
      this.render = __bind(this.render, this);

      this.editProject = __bind(this.editProject, this);

      this.processClick = __bind(this.processClick, this);

      this.unpressPreview = __bind(this.unpressPreview, this);

      this.pressPreview = __bind(this.pressPreview, this);
      ProjectPreview.__super__.constructor.apply(this, arguments);
      this.project.bind('update', this.render);
      this.project.bind('destroy', this.release);
    }

    ProjectPreview.prototype.tag = 'li';

    ProjectPreview.prototype.className = 'project-wrapper clearfix';

    ProjectPreview.prototype.events = {
      'click a.edit-link': 'editProject',
      'click a.delete': 'remove',
      'mousedown': 'pressPreview',
      'mouseup': 'unpressPreview',
      'mouseout': 'unpressPreview',
      'click': 'processClick'
    };

    ProjectPreview.prototype.pressPreview = function(event) {
      var $target;
      $target = $(event.target);
      if (!$target.hasClass('options-button') && !$target.parent().hasClass('options-button')) {
        return this.$el.addClass('pressed');
      }
    };

    ProjectPreview.prototype.unpressPreview = function() {
      return this.$el.removeClass('pressed');
    };

    ProjectPreview.prototype.processClick = function(event) {
      var $target;
      $target = $(event.target);
      if (!$target.hasClass('options-button') && !$target.parent().hasClass('options-button')) {
        if ($target.hasClass('title')) {
          event.preventDefault();
        }
        App.project = this.project;
        return this.navigate('/editor');
      }
    };

    ProjectPreview.prototype.editProject = function(event) {
      event.preventDefault();
      App.project = this.project;
      return this.navigate('/editor');
    };

    ProjectPreview.prototype.preventDefault = function(event) {
      return event.preventDefault();
    };

    ProjectPreview.prototype.remove = function(event) {
      event.preventDefault();
      event.stopPropagation();
      this.project.destroy();
      this.release();
      return App.project = null;
    };

    ProjectPreview.prototype.render = function() {
      this.html(this.view('work_manager_manager-preview')({
        project: this.project
      }));
      return this;
    };

    return ProjectPreview;

  })(Spine.Controller);

}).call(this);
