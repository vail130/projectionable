// Generated by CoffeeScript 1.3.3
(function() {
  var DashboardAccount,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Projectionable.Dashboard = (function(_super) {

    __extends(Dashboard, _super);

    function Dashboard() {
      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);

      var _this = this;
      Dashboard.__super__.constructor.apply(this, arguments);
      App.Dashboard = this;
      this.routes({
        '/dashboard': function() {
          _this.render().active();
          App.trigger('renderNavigation', 'dashboard');
          _this.lock = new App.Lock({
            el: $('#dashboard')
          });
          _this.lock.start();
          return $.when(App.accountPromise).done(function() {
            return _this.lock.stop().remove();
          });
        }
      });
    }

    Dashboard.prototype.className = 'dashboard';

    Dashboard.prototype.elements = {
      '.account-list': '$accountList'
    };

    Dashboard.prototype.addOne = function(account) {
      var controller;
      controller = new DashboardAccount({
        parent: this,
        account: account
      });
      return this.$accountList.append(controller.render().el);
    };

    Dashboard.prototype.addAll = function() {
      var account, accounts, _i, _len;
      this.$accountList.empty();
      accounts = Projectionable.Account.all();
      if (accounts.length > 0) {
        for (_i = 0, _len = accounts.length; _i < _len; _i++) {
          account = accounts[_i];
          this.addOne(account);
        }
      } else {
        this.$accountList.html(this.view('dashboard_dashboard-no-previews'));
      }
      return this;
    };

    Dashboard.prototype.render = function() {
      this.html(this.view('dashboard_dashboard'));
      $('#dashboard').html(this.$el);
      this.addAll();
      return this;
    };

    return Dashboard;

  })(Spine.Controller);

  DashboardAccount = (function(_super) {

    __extends(DashboardAccount, _super);

    function DashboardAccount() {
      this.render = __bind(this.render, this);

      this.getContext = __bind(this.getContext, this);
      DashboardAccount.__super__.constructor.apply(this, arguments);
    }

    DashboardAccount.prototype.className = 'account-wrapper clearfix';

    DashboardAccount.prototype.getContext = function() {
      return {
        account: this.account
      };
    };

    DashboardAccount.prototype.render = function() {
      this.html(this.view('dashboard_dashboard-preview')(this.getContext()));
      return this;
    };

    return DashboardAccount;

  })(Spine.Controller);

}).call(this);
