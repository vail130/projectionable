// Generated by CoffeeScript 1.3.3
(function() {
  var Footer, Lock, Navigation,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Projectionable = (function(_super) {

    __extends(Projectionable, _super);

    function Projectionable() {
      var accountDeferred, hash, projectDeferred, _ref,
        _this = this;
      Projectionable.__super__.constructor.apply(this, arguments);
      window.App = this;
      this.html(this.view('structure'));
      this.Lock = Lock;
      this.navigation = new Navigation;
      this.footer = new Footer;
      this.project = null;
      this.bind('renderNavigation', function(page) {
        return _this.navigation.render(page);
      });
      projectDeferred = $.Deferred();
      Project.one('refresh', function() {
        return projectDeferred.resolve();
      });
      this.projectPromise = projectDeferred.promise();
      accountDeferred = $.Deferred();
      Account.one('refresh', function() {
        return accountDeferred.resolve();
      });
      this.accountPromise = accountDeferred.promise();
      Account.fetch();
      Project.fetch();
      Permission.fetch();
      RequirementGroup.fetch();
      Requirement.fetch();
      this.stack = new Projectionable.Stack;
      Spine.Route.setup();
      hash = window.location.hash;
      if (hash.substr(0, 2) !== '#/' || ((_ref = hash.split('/')[1]) !== 'manager' && _ref !== 'editor' && _ref !== 'settings' && _ref !== 'exit')) {
        this.navigate('/manager');
      }
    }

    Projectionable.prototype.makeProjectTemplate = function() {
      return {
        title: "",
        rate: "",
        hours: "",
        hours_worked: "",
        date_updated: "",
        date_created: ""
      };
    };

    Projectionable.prototype.makePermissionTemplate = function(email, project_id) {
      return {
        email: email,
        project_id: project_id
      };
    };

    Projectionable.prototype.makeGroupTemplate = function(pid, idx) {
      if (idx == null) {
        idx = 0;
      }
      return {
        project_id: pid,
        title: "",
        status: "",
        index: idx,
        hours: "",
        hours_worked: "",
        date_updated: "",
        date_created: ""
      };
    };

    Projectionable.prototype.makeRequirementTemplate = function(gid, idx) {
      if (idx == null) {
        idx = 0;
      }
      return {
        project_id: "",
        group_id: gid,
        title: "",
        status: "",
        index: idx,
        hours: "",
        hours_worked: "",
        date_updated: "",
        date_created: ""
      };
    };

    Projectionable.prototype.formatNumber = function(number) {
      var decimal, negative, output, parts;
      if (typeof number === 'undefined') {
        return '';
      }
      parts = number.toString().split('.');
      decimal = parts[1] || '';
      number = parts[0];
      negative = false;
      if (number.substr(0, 1) === '-') {
        negative = true;
        number = number.substr(1);
      }
      number = number.replace(/[^0-9]/ig, '');
      decimal = decimal.replace(/[^0-9]/ig, '');
      output = '';
      while (number.length > 0) {
        if (output.length > 0) {
          output = ',' + output;
        }
        if (number.length > 3) {
          output = number.substr(-3, 3) + output;
          number = number.substr(0, number.length - 3);
        } else {
          output = number + output;
          number = '';
        }
      }
      if (negative) {
        output = '-' + output;
      }
      if (decimal.length > 0) {
        output += '.' + decimal;
      }
      return output;
    };

    return Projectionable;

  })(Spine.Controller);

  Lock = (function(_super) {

    __extends(Lock, _super);

    function Lock() {
      this.remove = __bind(this.remove, this);

      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);
      Lock.__super__.constructor.apply(this, arguments);
      this.$lock = $('<div></div>').css({
        display: 'none',
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        'background-color': 'white',
        opacity: .5,
        filter: 'alpha(opacity=50)',
        'z-index': 999999999999999999
      });
      this.$el.append(this.$lock);
      this.state = 'stopped';
    }

    Lock.prototype.start = function() {
      var _ref;
      this.initialPosition = this.$el.css('position');
      if ((_ref = this.initialPosition) !== 'absolute' && _ref !== 'fixed') {
        this.$el.css('position', 'relative');
      }
      this.$lock.show();
      this.spinner = new Spinner({
        lines: 13,
        length: 15,
        width: 4,
        radius: 18,
        color: '#222',
        trail: 60,
        shadow: true
      }).spin(this.$lock.get(0));
      this.$lock.children('.spinner').css({
        top: '50%',
        left: '50%'
      });
      this.state = 'started';
      return this;
    };

    Lock.prototype.stop = function() {
      this.spinner.stop();
      this.$lock.hide();
      this.$el.css('position', this.initialPosition);
      this.initialPosition = null;
      this.state = 'stopped';
      return this;
    };

    Lock.prototype.remove = function() {
      if (this.state === 'started') {
        this.stop();
      }
      this.$lock.remove();
      return this;
    };

    return Lock;

  })(Spine.Controller);

  Navigation = (function(_super) {

    __extends(Navigation, _super);

    function Navigation() {
      this.render = __bind(this.render, this);
      this.el = $('#navigation');
      Navigation.__super__.constructor.apply(this, arguments);
      this.render('manager');
    }

    Navigation.prototype.render = function(page) {
      var context;
      context = {
        page: typeof page === 'undefined' ? 'manager' : page
      };
      this.html(this.view('navigation')(context));
      return this;
    };

    return Navigation;

  })(Spine.Controller);

  Footer = (function(_super) {

    __extends(Footer, _super);

    function Footer() {
      this.render = __bind(this.render, this);
      this.el = $('#footer');
      Footer.__super__.constructor.apply(this, arguments);
      this.render();
    }

    Footer.prototype.render = function() {
      this.html(this.view('footer'));
      return this;
    };

    return Footer;

  })(Spine.Controller);

  $(function() {
    return new Projectionable({
      el: $('#projectionable')
    });
  });

}).call(this);
